// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QMAdSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension QMAdSDK.QMDialog {
  @_Concurrency.MainActor(unsafe) public func showDialog<T>(view: T, direction: QMAdSDK.QMDialogDirection? = nil, completion: (() -> Swift.Void)? = nil) where T : UIKit.UIView, T : QMAdSDK.QMDialogProtocol
  @_Concurrency.MainActor(unsafe) public func showDialog<T>(controller: T, direction: QMAdSDK.QMDialogDirection? = nil, completion: (() -> Swift.Void)? = nil) where T : UIKit.UIViewController, T : QMAdSDK.QMDialogProtocol
  @_Concurrency.MainActor(unsafe) public func showDialog(proto: any QMAdSDK.QMDialogProtocol, direction: QMAdSDK.QMDialogDirection? = nil, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func updateLayoutAnimate(proto: any QMAdSDK.QMDialogProtocol)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismissDialog()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismissDialog(view: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismissDialog(controller: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismissAllDialog()
}
@objc public enum QMMaterialType : Swift.UInt, @unchecked Swift.Sendable {
  case imageSmall = 1
  case imageLarge = 2
  case imageAtlas = 3
  case video = 4
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QMImage : ObjectiveC.NSObject {
  @objc public var url: Swift.String {
    @objc get
  }
  @objc public var width: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var duration: Swift.Int {
    @objc get
  }
  @objc public var mute: Swift.Bool {
    @objc get
  }
  @objc public var auto_play: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QMNativeMaterial : ObjectiveC.NSObject {
  @objc public var type: QMAdSDK.QMMaterialType {
    @objc get
  }
  @objc public var title: Swift.String {
    @objc get
  }
  @objc public var desc: Swift.String {
    @objc get
  }
  @objc public var qmMedia: QMAdSDK.QMImage {
    @objc get
    @objc set
  }
  @objc public var atlasImage: [QMAdSDK.QMImage] {
    @objc get
    @objc set
  }
  @objc public var interactionTitle: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum QMAdSDKInitializationState : Swift.UInt {
  case notReady = 0
  case ready = 1
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class QMAdSDKManager : ObjectiveC.NSObject {
  @objc public class func sdkVersion() -> Swift.String
  @objc public class func sdkState() -> QMAdSDK.QMAdSDKInitializationState
  @objc public class func setupSDK(with config: QMAdSDK.QMAdSDKConfiguration)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol QMNativeAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func qm_nativeAdLoadSuccess(_ nativeAd: QMAdSDK.QMNativeAd)
  @objc func qm_nativeAdLoadFail(_ nativeAd: QMAdSDK.QMNativeAd, error: any Swift.Error)
  @objc func qm_nativeAdDidShow(_ nativeAd: QMAdSDK.QMNativeAd)
  @objc func qm_nativeAdDidClick(_ nativeAd: QMAdSDK.QMNativeAd)
  @objc func qm_nativeAdDidCloseOtherController(_ nativeAd: QMAdSDK.QMNativeAd)
}
@objc @objcMembers public class QMNativeAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any QMAdSDK.QMNativeAdDelegate)?
  @objc public var ecpm: Swift.Int {
    @objc get
  }
  @objc public var metaDic: [Swift.String : Any] {
    @objc get
  }
  @objc public var slotID: Swift.String {
    @objc get
  }
  @objc public var materialMeta: QMAdSDK.QMNativeMaterial? {
    @objc get
  }
  @objc public init(slot slotID: Swift.String)
  @objc public func loadAdData()
  @objc public func registerContainer(_ containerView: UIKit.UIView, withClickableViews clickableViews: [UIKit.UIView]?)
  @objc public func unregisterView()
  @objc deinit
}
@objc public enum QMInterstitialAdCloseType : Swift.Int {
  case unknow = 0
  case skip = 1
  case clickAd = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol QMInterstitialAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func qm_interstitialAdLoadSuccess(_ interstitialAd: QMAdSDK.QMInterstitialAd)
  @objc func qm_interstitialAdLoadFail(_ interstitialAd: QMAdSDK.QMInterstitialAd, error: (any Swift.Error)?)
  @objc func qm_interstitialAdDidShow(_ interstitialAd: QMAdSDK.QMInterstitialAd)
  @objc func qm_interstitialAdDidClick(_ interstitialAd: QMAdSDK.QMInterstitialAd)
  @objc func qm_interstitialAdDidClose(_ interstitialAd: QMAdSDK.QMInterstitialAd, closeType type: QMAdSDK.QMInterstitialAdCloseType)
  @objc func qm_interstitialAdDidCloseOtherController(_ interstitialAd: QMAdSDK.QMInterstitialAd)
  @objc func qm_interstitialAdVideoDidPlayComplection(_ interstitialAd: QMAdSDK.QMInterstitialAd)
  @objc func qm_interstitialAdVideoDidPlayFinished(_ interstitialAd: QMAdSDK.QMInterstitialAd, didFailWithError error: any Swift.Error)
}
@objc @objcMembers public class QMInterstitialAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any QMAdSDK.QMInterstitialAdDelegate)?
  @objc public var ecpm: Swift.Int {
    @objc get
  }
  @objc public var metaDic: [Swift.String : Any] {
    @objc get
  }
  @objc public var slotID: Swift.String {
    @objc get
  }
  @objc public init(slot slotID: Swift.String)
  @objc public func loadAdData()
  @objc public func showInterstitialView(inRootViewController viewController: UIKit.UIViewController)
  @objc deinit
}
extension QMAdSDK.QMInterstitialAd {
  @objc @discardableResult
  public static func loadData(slot: Swift.String, registerObserver: any QMAdSDK.QMInterstitialAdDelegate) -> QMAdSDK.QMInterstitialAd
}
extension QMAdSDK.QMDialog : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic override public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public enum QMDialogDirection : Swift.Int {
  case top, left, bottom, right, center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum QMDialogLevel : Swift.Int {
  case low, middle, high, superHigh
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol QMDialogProtocol : AnyObject {
  func willAppear()
  func didAppear()
  func dismissAppear()
  func dialogContainer() -> UIKit.UIView
  func dialogBackgroundColor() -> UIKit.UIColor
  func clickFloatingLayerToCancel() -> Swift.Bool
  func slidingDisappearance() -> Swift.Bool
  func dialogLevel() -> QMAdSDK.QMDialogLevel
  func dialogDirection() -> QMAdSDK.QMDialogDirection
  func mayBeConflictingGestures() -> Swift.Array<UIKit.UIGestureRecognizer>
  func dialogGesturePenetration() -> Swift.Bool
  func centerShowAnimate(animations: (Swift.Bool) -> Swift.Void, completion: () -> Swift.Void)
  func centerDismissAnimate(animations: (Swift.Bool) -> Swift.Void, completion: () -> Swift.Void)
  func layoutParameter() -> ((width: CoreFoundation.CGFloat, screenRatio: Swift.Bool), (height: CoreFoundation.CGFloat, screenRatio: Swift.Bool))
}
extension QMAdSDK.QMDialogProtocol {
  public var dialog: QMAdSDK.QMDialog? {
    get
  }
  public func dialogContainer() -> UIKit.UIView
  public func willAppear()
  public func didAppear()
  public func dismissAppear()
  public func dialogBackgroundColor() -> UIKit.UIColor
  public func dialogLevel() -> QMAdSDK.QMDialogLevel
  public func dialogDirection() -> QMAdSDK.QMDialogDirection
  public func slidingDisappearance() -> Swift.Bool
  public func clickFloatingLayerToCancel() -> Swift.Bool
  public func dialogGesturePenetration() -> Swift.Bool
  public func mayBeConflictingGestures() -> Swift.Array<UIKit.UIGestureRecognizer>
  public func centerShowAnimate(animations: (Swift.Bool) -> Swift.Void, completion: () -> Swift.Void)
  public func centerDismissAnimate(animations: (Swift.Bool) -> Swift.Void, completion: () -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class QMDialog : UIKit.UIControl {
  @objc @_Concurrency.MainActor(unsafe) dynamic weak public var container: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public init(containerView: UIKit.UIView)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class QMNativeAdRelatedView : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var adLabel: UIKit.UILabel? {
    @objc get
  }
  @objc public var videoAdView: UIKit.UIView? {
    @objc get
  }
  @objc public func refreshData(_ nativeAd: QMAdSDK.QMNativeAd)
  @objc deinit
}
@objc public protocol QMFeedAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func qm_feedAdLoadSuccess(_ feedAd: QMAdSDK.QMFeedAd?)
  @objc func qm_feedAdLoadFail(_ feedAd: QMAdSDK.QMFeedAd?, error: any Swift.Error)
  @objc func qm_feedAdDidShow(_ feedAd: QMAdSDK.QMFeedAd?)
  @objc func qm_feedAdDidClick(_ feedAd: QMAdSDK.QMFeedAd?)
  @objc func qm_feedAdDidClose(_ feedAd: QMAdSDK.QMFeedAd?)
  @objc func qm_feedAdDidCloseOtherController(_ feedAd: QMAdSDK.QMFeedAd?)
}
@objc @objcMembers public class QMFeedAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any QMAdSDK.QMFeedAdDelegate)?
  @objc public var ecpm: Swift.Int {
    @objc get
  }
  @objc public var metaDic: [Swift.String : Any] {
    @objc get
  }
  @objc public var slotID: Swift.String {
    @objc get
  }
  @objc public var feedView: UIKit.UIView? {
    @objc get
  }
  @objc public func handleFeedAdHeight() -> CoreFoundation.CGFloat
  @objc public func loadAdData()
  @objc public init(slot slotID: Swift.String)
  @objc deinit
}
@objc public enum QMSplashAdCloseType : Swift.UInt, @unchecked Swift.Sendable {
  case unknow = 0
  case skip = 1
  case countdown = 2
  case clickAd = 3
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public protocol QMSplashAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func qm_splashAdLoadSuccess(_ splashAd: QMAdSDK.QMSplashAd)
  @objc func qm_splashAdLoadFail(_ splashAd: QMAdSDK.QMSplashAd, error: (any Swift.Error)?)
  @objc func qm_splashAdDidShow(_ splashAd: QMAdSDK.QMSplashAd)
  @objc func qm_splashAdDidClick(_ splashAd: QMAdSDK.QMSplashAd)
  @objc func qm_splashAdDidClose(_ splashAd: QMAdSDK.QMSplashAd, closeType type: QMAdSDK.QMSplashAdCloseType)
  @objc func qm_splashAdVideoDidPlayFinished(_ splashAd: QMAdSDK.QMSplashAd, didFailWithError error: any Swift.Error)
}
@objc @objcMembers public class QMSplashAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any QMAdSDK.QMSplashAdDelegate)?
  @objc public var ecpm: Swift.Int {
    @objc get
  }
  @objc public var metaDic: [Swift.String : Any] {
    @objc get
  }
  @objc public var slotID: Swift.String {
    @objc get
  }
  @objc public init(slot slotID: Swift.String)
  @objc public func loadAdData()
  @objc public func showSplashViewController(_ controller: UIKit.UIViewController, winthBottomView bottomView: UIKit.UIView)
  @objc public func showSplashViewController(_ controller: UIKit.UIViewController)
  @objc deinit
}
extension QMAdSDK.QMSplashAd {
  @objc @discardableResult
  public static func loadData(slot: Swift.String, registerObserver: any QMAdSDK.QMSplashAdDelegate) -> QMAdSDK.QMSplashAd
}
@objc @_inheritsConvenienceInitializers @objcMembers public class QMCrashReporter : ObjectiveC.NSObject {
  @objc public static func setAbnormalReportCallback(_ reportBlock: @escaping (Swift.String, [Swift.String]) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class QMAdSDKConfiguration : ObjectiveC.NSObject {
  @objc public static let shareConfiguration: QMAdSDK.QMAdSDKConfiguration
  @objc public var appId: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var customIdfa: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var caid: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var caidVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc open var lastCaid: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var lastCaidVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var longitude: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var latitude: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var canSniffingInstalls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var exceptionGuard: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public enum QMRewardedVideoAdCloseType : Swift.UInt, @unchecked Swift.Sendable {
  case unknow = 0
  case skip = 1
  case clickAd = 3
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public protocol QMRewardedVideoAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func qm_rewardedVideoAdLoadSuccess(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd)
  @objc func qm_rewardedVideoAdLoadFail(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd, error: (any Swift.Error)?)
  @objc func qm_rewardedVideoAdDidShow(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd)
  @objc func qm_rewardedVideoAdDidClick(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd)
  @objc func qm_rewardedVideoAdDidClose(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd, closeType type: QMAdSDK.QMRewardedVideoAdCloseType)
  @objc func qm_rewardedVideoAdDidCloseOtherController(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd)
  @objc func qm_rewardedVideoAdDidRewarded(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd)
  @objc func qm_rewardedVideoAdVideoDidPlayComplection(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd, rewarded isRewarded: Swift.Bool)
  @objc func qm_rewardedVideoAdVideoDidPlayFinished(_ rewardedVideoAd: QMAdSDK.QMRewardedVideoAd, didFailWithError error: any Swift.Error, rewarded isRewarded: Swift.Bool)
}
@objc @objcMembers open class QMRewardedVideoAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any QMAdSDK.QMRewardedVideoAdDelegate)?
  @objc public var ecpm: Swift.Int {
    @objc get
  }
  @objc public var metaDic: [Swift.String : Any] {
    @objc get
  }
  @objc public var slotID: Swift.String {
    @objc get
  }
  @objc public init(slot slotID: Swift.String)
  @objc public func loadAdData()
  @objc public func showRewardedVideoView(inRootViewController viewController: UIKit.UIViewController)
  @objc deinit
}
extension QMAdSDK.QMRewardedVideoAd {
  @objc @discardableResult
  public static func loadData(slot: Swift.String, registerObserver: any QMAdSDK.QMRewardedVideoAdDelegate) -> QMAdSDK.QMRewardedVideoAd
}
extension QMAdSDK.QMMaterialType : Swift.Equatable {}
extension QMAdSDK.QMMaterialType : Swift.Hashable {}
extension QMAdSDK.QMMaterialType : Swift.RawRepresentable {}
extension QMAdSDK.QMAdSDKInitializationState : Swift.Equatable {}
extension QMAdSDK.QMAdSDKInitializationState : Swift.Hashable {}
extension QMAdSDK.QMAdSDKInitializationState : Swift.RawRepresentable {}
extension QMAdSDK.QMInterstitialAdCloseType : Swift.Equatable {}
extension QMAdSDK.QMInterstitialAdCloseType : Swift.Hashable {}
extension QMAdSDK.QMInterstitialAdCloseType : Swift.RawRepresentable {}
extension QMAdSDK.QMDialogDirection : Swift.Equatable {}
extension QMAdSDK.QMDialogDirection : Swift.Hashable {}
extension QMAdSDK.QMDialogDirection : Swift.RawRepresentable {}
extension QMAdSDK.QMDialogLevel : Swift.Equatable {}
extension QMAdSDK.QMDialogLevel : Swift.Hashable {}
extension QMAdSDK.QMDialogLevel : Swift.RawRepresentable {}
extension QMAdSDK.QMSplashAdCloseType : Swift.Equatable {}
extension QMAdSDK.QMSplashAdCloseType : Swift.Hashable {}
extension QMAdSDK.QMSplashAdCloseType : Swift.RawRepresentable {}
extension QMAdSDK.QMRewardedVideoAdCloseType : Swift.Equatable {}
extension QMAdSDK.QMRewardedVideoAdCloseType : Swift.Hashable {}
extension QMAdSDK.QMRewardedVideoAdCloseType : Swift.RawRepresentable {}
